rules:
  - id: node-mssql-sqli
    languages:
      - javascript
      - typescript
    message: >-
      Detected string concatenation with a non-literal variable in a
      `mssql` JS SQL statement. This could lead to SQL injection if the variable is
      user-controlled
      and not properly sanitized. In order to prevent SQL injection,
      used parameterized queries or prepared statements instead.
      You can use parameterized statements like so:
      `$REQ.input('USER_ID', mssql.Int, id);`
    metadata:
      category: security
      technology:
        - mssql
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      references:
        - https://node-postgres.com/features/queries
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-inside: |
              function ... (...,$FUNC,...) {
                ...
              }
          - focus-metavariable: $FUNC
    pattern-sinks:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              require('mssql');
              ...
          - pattern-inside: |
              import 'mssql';
              ...
        - pattern-inside: |
            $REQ = $POOL.request(...)
            ...
        - pattern: |
            $REQ.query($QUERY,...)
        - focus-metavariable: $QUERY
    severity: WARNING
